/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * React Gin SPA Practice API
 * OpenAPI spec version: 0.1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

export type GetApiPing200 = {
	message?: string;
};

export type GetApiPing2200 = {
	message?: string;
};

export type getApiPingResponse200 = {
	data: GetApiPing200;
	status: 200;
};

export type getApiPingResponseSuccess = getApiPingResponse200 & {
	headers: Headers;
};

export type getApiPingResponse = getApiPingResponseSuccess;

export const getGetApiPingUrl = () => {
	return `/api/ping`;
};

export const getApiPing = async (
	options?: RequestInit,
): Promise<getApiPingResponse> => {
	const res = await fetch(getGetApiPingUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();

	const data: getApiPingResponse["data"] = body ? JSON.parse(body) : {};
	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiPingResponse;
};

export const getGetApiPingKey = () => [`/api/ping`] as const;

export type GetApiPingQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiPing>>
>;
export type GetApiPingQueryError = Promise<unknown>;

export const useGetApiPing = <TError = Promise<unknown>>(options?: {
	swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiPing>>, TError> & {
		swrKey?: Key;
		enabled?: boolean;
	};
	fetch?: RequestInit;
}) => {
	const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiPingKey() : null));
	const swrFn = () => getApiPing(fetchOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

export type getApiPing2Response200 = {
	data: GetApiPing2200;
	status: 200;
};

export type getApiPing2ResponseSuccess = getApiPing2Response200 & {
	headers: Headers;
};

export type getApiPing2Response = getApiPing2ResponseSuccess;

export const getGetApiPing2Url = () => {
	return `/api/ping2`;
};

export const getApiPing2 = async (
	options?: RequestInit,
): Promise<getApiPing2Response> => {
	const res = await fetch(getGetApiPing2Url(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();

	const data: getApiPing2Response["data"] = body ? JSON.parse(body) : {};
	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiPing2Response;
};

export const getGetApiPing2Key = () => [`/api/ping2`] as const;

export type GetApiPing2QueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiPing2>>
>;
export type GetApiPing2QueryError = Promise<unknown>;

export const useGetApiPing2 = <TError = Promise<unknown>>(options?: {
	swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiPing2>>, TError> & {
		swrKey?: Key;
		enabled?: boolean;
	};
	fetch?: RequestInit;
}) => {
	const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiPing2Key() : null));
	const swrFn = () => getApiPing2(fetchOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};
